openapi: 3.0.1
info:
  title: ONE Specification for DCSA Track & Trace API v2.2
  description: "\r\n# DCSA Track and Trace v2.2\r\n\r\n**Overview:**\r\n\r\nThe **DCSA Track and Trace v2.2 API** provides a standardized and reliable mechanism for tracking container movements throughout the global shipping network. It is designed to align with the Digital Container Shipping Association (DCSA) standards, promoting **interoperability** between carriers, shippers, and third-party logistics providers.\r\n\r\nThis API allows stakeholders to monitor the **end-to-end journey** of containers, offering insights into key milestones such as:\r\n- **Vessel arrivals**\r\n- **Departures**\r\n- **Equipment loading**\r\n- **Transport events**\r\n\r\nBy delivering **uniform tracking data** across various carriers and ports, this API reduces manual processes and improves operational efficiency for managing large-scale shipping operations.\r\n\r\n---\r\n\r\n## Key Features:\r\n\r\n### 1. **Event Standardization**  \r\nAll events related to container transport are defined according to DCSA standards, ensuring consistent terminology and reporting across the entire logistics chain.\r\n\r\n### 2. **On-Demand Data Retrieval**  \r\nCustomers can pull **up-to-date information** about container locations, equipment status, and shipment events when needed, enabling timely and informed decision-making.\r\n\r\n### 3. **Seamless Integration**  \r\nDesigned to integrate easily with existing systems, the API offers flexibility for users who manage large-scale shipments or have evolving logistics requirements.\r\n\r\n### 4. **Scalability**  \r\nWhether tracking a few containers or managing thousands, the API is optimized to handle **large datasets efficiently**, ensuring timely access to critical shipping information.\r\n\r\n---\r\n\r\n### Conclusion:\r\n\r\nThe **DCSA Track and Trace v2.2 API** empowers companies to enhance their visibility into global logistics operations, improve communication between parties, and drive better service outcomes through transparency and **real-time information sharing**.\r\n"
  contact:
    name: Ocean Network Express (ONE)
    url: https://ecomm.one-line.com/one-ecom/manage-shipment/cargo-tracking?trakNoParam=TCKU3595080
    email: integration.support@one-line.com
  version: "2.2"
servers:
  - url: https://apis.one-line.com
  - url: https://apis-test.one-line.com
  - url: https://apis-dev.one-line.com
paths:
  /v1/oauth/accesstoken:
    post:
      tags:
        - Token
      operationId: Authenticate
      description: Publish access token for OAuth authentication.
      parameters:
        - name: grant_type
          in: query
          description: client_credentials
          required: true
          style: form
          explode: true
          schema:
            type: string
          example: client_credentials
        - name: apikey
          in: header
          description: Client key obtained by registering the app.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: 4gH7zKl8WpQeR1v9TnM2XoF6bJsD5iYcU0ArL3
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: Invalid API Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      security:
        - basicAuth: []
  /v2/cargotracking/events:
    get:
      tags:
        - Events
      operationId: GetEvents
      summary: "Find events by type, Booking Reference, Bill of Lading or Equipment Reference."
      description: "# Best Practice Guidelines for API Client Configuration\n\n**To ensure the efficient and accurate retrieval of container tracking information via the ONE DCSA Track and Trace v2.2 API, we recommend the following configuration settings for your API client.**\n\n### 1. Number of Containers:\nIt is anticipated that a significant number of containers, potentially reaching several thousand, may be in active transit within your system, requiring continuous tracking and status updates.\n\n### 2. API Call Rate: **60 API Calls per Minute**\n- Our recommendation is that your API polling client should be configured to make **60 API calls per minute**.\n- This rate limit is established to maintain the responsiveness and reliability of the ONE API service. Exceeding this rate may lead to throttling or delays in response times.\n\n### 3. Batch Job Execution:\n- API consumers who are batching their requests, we recommend scheduling your API client to run **batch jobs up to three times daily** to retrieve tracking information for containers in your system.\n- **Batch Job API Calls**: Depending on the volume of containers, each batch job may generate several thousand API calls to the ONE server.\n\n### 4. Use of `equipmentReference`:\n- Although `carrierBookingReference` and `transportDocumentReference` are available, we highly recommend using the **`equipmentReference`** (container number) in your API calls whenever possible.\n- Using the container number is more efficient in terms of latency, improving response times and reducing processing load.\n\n### 5. Error Handling and Retry Mechanisms:\n- Implement robust error handling and retry mechanisms within your API client to manage potential disruptions in connectivity or response errors.\n- This will help minimize data retrieval failures and ensure continuous tracking of container movements.\n\n### 6. Data Synchronization:\n- To avoid data discrepancies, schedule your API calls to align with the frequency of container status updates provided by the ONE system (Transport Plan).\n- This synchronization will help ensure that the tracking data in your system is up-to-date and accurate.\n   \n"
      parameters:
        - name: eventType
          in: query
          description: "The type of event(s) to filter by. \n Possible values are  \n - TRANSPORT (Transport events) \n - EQUIPMENT (Equipment events) \n"
          required: false
          style: form
          explode: true
          schema:
            type: array
            description: |
              A list of event types. Default is all events (ONE doesn't support non-operational Shipment events now).
            example:
              - EQUIPMENT
              - TRANSPORT
            items:
              type: string
              description: |
                The Event Type of the object.
              nullable: false
              enum:
                - EQUIPMENT
                - TRANSPORT
        - name: carrierBookingReference
          in: query
          description: |
            A set of unique characters provided by carrier to identify a booking. Specifying this filter will only return events related to this particular carrierBookingReference.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: transportDocumentReference
          in: query
          description: |
            A unique number reference allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment. Specifying this filter will only return events related to this particular transportDocumentReference.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: equipmentReference
          in: query
          description: "The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible."
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of items to return.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            default: 100
          example: 100
        - name: sort
          in: query
          description: |
            A comma-separated (,) list of field names is used to define the sort order. To specify the sort order for each field name required, use a colon (:) between the field name and the keyword asc (ascending) or desc (descending). If the keyword is not used, ascending (asc) order is applied by default.
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: payload.eventDateTime:desc
        - name: apikey
          in: header
          description: Valid API key.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: H2mX7pLwQbZ9rV8TjK5oY1fNsD3u4cA
        - name: Authorization
          in: header
          description: Valid access token.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: Bearer m9ZrH7yBvq3fX8UoLJ2wP5cT1nE0gKs
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                title: Events
                type: array
                items:
                  title: Event
                  anyOf:
                    - $ref: '#/components/schemas/transportEvent'
                    - $ref: '#/components/schemas/equipmentEvent'
                  discriminator:
                    propertyName: eventType
                    mapping:
                      TRANSPORT: '#/components/schemas/transportEvent'
                      EQUIPMENT: '#/components/schemas/equipmentEvent'
      security:
        - bearerAuth: []
components:
  schemas:
    transportEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/operationsTransportEvent'
        - type: object
          properties:
            documentReferences:
              $ref: '#/components/schemas/documentReferences'
        - $ref: '#/components/schemas/references'
    operationsTransportEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseEvent'
        - $ref: '#/components/schemas/baseTransportEvent'
    baseEvent:
      required:
        - eventCreatedDateTime
      type: object
      allOf:
        - type: object
          properties:
            eventID:
              $ref: '#/components/schemas/eventID'
        - type: object
          properties:
            eventCreatedDateTime:
              $ref: '#/components/schemas/eventCreatedDateTime'
        - $ref: '#/components/schemas/baseEventBody'
    eventID:
      type: string
      description: |
        The unique identifier for the event (the message - not the source).

        <b>NB</b>&#58; This field should be considered Metadata
      format: uuid
      example: 3cecb101-7a1a-43a4-9d62-e88a131651e2
    eventCreatedDateTime:
      type: string
      description: |
        The timestamp of when the event was created.

        <b>NB</b>&#58; This field should be considered Metadata
      format: date-time
      example: 2021-01-09T14:12:56+01:00
    baseEventBody:
      required:
        - eventClassifierCode
        - eventDateTime
        - eventType
      type: object
      description: |
        The Event entity is described as a generalization of all the specific event categories. An event always takes place in relation to a shipment and can additionally be linked to a transport or an equipment
      allOf:
        - type: object
          properties:
            eventType:
              $ref: '#/components/schemas/eventType'
        - type: object
          properties:
            eventClassifierCode:
              $ref: '#/components/schemas/eventClassifierCode'
        - type: object
          properties:
            eventDateTime:
              $ref: '#/components/schemas/eventDateTime'
    eventType:
      type: string
      description: |
        The Event Type of the object - to be used as a discriminator.

        <b>NB</b>&#58; This field should be considered Metadata
    eventClassifierCode:
      type: string
      description: |
        Code for the event classifier. Values can vary depending on eventType
    eventDateTime:
      type: string
      description: "The local date and time, where the event took place or when the event will take place, in ISO 8601 format."
      format: date-time
      example: 2019-11-12T07:41:00+08:30
    baseTransportEvent:
      required:
        - transportCall
        - transportEventTypeCode
      type: object
      description: |
        The transport event entity is a specialization of the event entity to support specification of data that only applies to a transport event.
      allOf:
        - type: object
          properties:
            eventType:
              type: string
              example: TRANSPORT
              enum:
                - TRANSPORT
        - type: object
          properties:
            eventClassifierCode:
              type: string
              description: |
                Code for the event classifier can be
                - ACT (Actual)
                - PLN (Planned)
                - EST (Estimated)
              example: ACT
              enum:
                - ACT
                - PLN
                - EST
        - type: object
          properties:
            transportEventTypeCode:
              $ref: '#/components/schemas/transportEventTypeCode'
        - type: object
          properties:
            delayReasonCode:
              $ref: '#/components/schemas/delayReasonCode'
        - type: object
          properties:
            vesselScheduleChangeRemark:
              $ref: '#/components/schemas/vesselScheduleChangeRemark'
        - type: object
          properties:
            changeRemark:
              $ref: '#/components/schemas/changeRemark'
        - type: object
          properties:
            transportCallID:
              allOf:
                - $ref: '#/components/schemas/transportCallID'
                - deprecated: true
                - description: The unique identifier for a transport call<br><br>Deprecated - not needed as the TransportCall object is included
        - type: object
          properties:
            transportCall:
              $ref: '#/components/schemas/transportCall'
        - type: object
          properties:
            eventTypeCode:
              $ref: '#/components/schemas/eventTypeCode'
        - type: object
          properties:
            eventTypeCode:
              type: string
              description: |
                Unique identifier for Event Type Code, for transport events this is either
                - ARRI (Arrival)
                - DEPA (Departure)

                Deprecated - use transportEventTypeCode instead
              deprecated: true
              enum:
                - ARRI
                - DEPA
    transportEventTypeCode:
      type: string
      description: |
        Identifier for type of Transport event
        - ARRI (Arrived)
        - DEPA (Departed)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv">GitHub</a>
      example: ARRI
      enum:
        - ARRI
        - DEPA
    delayReasonCode:
      maxLength: 3
      type: string
      description: Reason code for the delay. The SMDG-Delay-Reason-Codes are used for this attribute. The code list can be found at http://www.smdg.org/smdg-code-lists/
      example: WEA
    vesselScheduleChangeRemark:
      maxLength: 250
      type: string
      description: |
        Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.

        Deprecated - use changeRemark instead
      example: Bad weather
      deprecated: true
    changeRemark:
      maxLength: 250
      type: string
      description: Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.
      example: Bad weather
    transportCallID:
      maxLength: 100
      type: string
      description: The unique identifier for a transport call
      example: 123e4567-e89b-12d3-a456-426614174000
    transportCall:
      required:
        - modeOfTransport
        - transportCallID
      type: object
      allOf:
        - type: object
          properties:
            transportCallID:
              $ref: '#/components/schemas/transportCallID'
        - type: object
          properties:
            carrierServiceCode:
              $ref: '#/components/schemas/carrierServiceCode'
        - type: object
          properties:
            carrierVoyageNumber:
              $ref: '#/components/schemas/carrierVoyageNumber'
        - type: object
          properties:
            carrierVoyageNumber:
              description: |
                The vessel operator-specific identifier of the Voyage.

                In case there are multiple voyages the export voyage is chosen.
              deprecated: true
        - type: object
          properties:
            exportVoyageNumber:
              $ref: '#/components/schemas/exportVoyageNumber'
        - type: object
          properties:
            importVoyageNumber:
              $ref: '#/components/schemas/importVoyageNumber'
        - type: object
          properties:
            transportCallSequenceNumber:
              $ref: '#/components/schemas/transportCallSequenceNumber'
        - type: object
          properties:
            UNLocationCode:
              $ref: '#/components/schemas/UNLocationCode'
        - type: object
          properties:
            facilityCode:
              $ref: '#/components/schemas/facilityCode'
        - type: object
          properties:
            facilityCodeListProvider:
              $ref: '#/components/schemas/facilityCodeListProvider'
        - type: object
          properties:
            facilityTypeCode:
              $ref: '#/components/schemas/facilityTypeCodeTRN'
        - type: object
          properties:
            otherFacility:
              $ref: '#/components/schemas/otherFacility'
        - type: object
          properties:
            modeOfTransport:
              $ref: '#/components/schemas/modeOfTransport'
        - type: object
          properties:
            location:
              allOf:
                - $ref: '#/components/schemas/location'
                - type: object
                  description: Location of the facility. Can often be omitted when it is just repeating the contents of the UNLocationCode field.
                  example: null
        - type: object
          properties:
            vessel:
              $ref: '#/components/schemas/vessel'
    carrierServiceCode:
      maxLength: 5
      type: string
      description: |
        The code of the service for which the schedule details are published.
      example: FE1
    carrierVoyageNumber:
      maxLength: 50
      type: string
      description: The vessel operator-specific identifier of the Voyage.
      example: 2103S
    exportVoyageNumber:
      maxLength: 50
      type: string
      description: The vessel operator-specific identifier of the export Voyage.
      example: 2103S
    importVoyageNumber:
      maxLength: 50
      type: string
      description: The vessel operator-specific identifier of the import Voyage.
      example: 2103N
    transportCallSequenceNumber:
      type: integer
      description: Transport operator&apos;s key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.
      example: 2
    UNLocationCode:
      maxLength: 5
      type: string
      description: The UN Location code specifying where the place is located.
      example: FRPAR
    facilityCode:
      maxLength: 6
      type: string
      description: |
        The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.
      nullable: false
      example: ADT
    facilityCodeListProvider:
      type: string
      description: |
        The provider used for identifying the facility Code
      example: SMDG
      enum:
        - BIC
        - SMDG
    facilityTypeCodeTRN:
      type: string
      description: |
        A specialized version of the facilityCode to be used in TransportCalls. The code to identify the specific type of facility.
        - BOCR (Border crossing)
        - CLOC (Customer location)
        - COFS (Container freight station)
        - COYA (Deprecated - use OFFD intead)
        - OFFD (Off dock storage)
        - DEPO (Depot)
        - INTE (Inland terminal)
        - POTE (Port terminal)
        - RAMP (Ramp)
      example: POTE
      enum:
        - BOCR
        - CLOC
        - COFS
        - COYA
        - OFFD
        - DEPO
        - INTE
        - POTE
        - RAMP
    otherFacility:
      maxLength: 50
      type: string
      description: An alternative way to capture the facility when no standardized DCSA facility code can be found.
      example: Depot location or address
    modeOfTransport:
      type: string
      description: |
        The mode of transport as defined by DCSA.
      enum:
        - VESSEL
        - RAIL
        - TRUCK
        - BARGE
        - FEEDER
    location:
      type: object
      description: |
        generally used to capture location-related data, also for locations without UN Location Codes.
      allOf:
        - type: object
          properties:
            locationName:
              $ref: '#/components/schemas/locationName'
        - type: object
          properties:
            latitude:
              $ref: '#/components/schemas/latitude'
        - type: object
          properties:
            longitude:
              $ref: '#/components/schemas/longitude'
        - type: object
          properties:
            UNLocationCode:
              $ref: '#/components/schemas/UNLocationCode'
        - type: object
          properties:
            facilityCode:
              $ref: '#/components/schemas/facilityCode'
        - type: object
          properties:
            facilityCodeListProvider:
              $ref: '#/components/schemas/facilityCodeListProvider'
        - type: object
          properties:
            address:
              description: Address related information
              allOf:
                - $ref: '#/components/schemas/address'
    locationName:
      maxLength: 100
      type: string
      description: The name of the location.
      example: Eiffel Tower
    latitude:
      maxLength: 10
      type: string
      description: Geographic coordinate that specifies the north–south position of a point on the Earth&apos;s surface.
      example: "48.8585500"
    longitude:
      maxLength: 11
      type: string
      description: Geographic coordinate that specifies the east–west position of a point on the Earth&apos;s surface.
      example: "2.294492036"
    address:
      type: object
      description: An object for storing address related information
      allOf:
        - type: object
          properties:
            name:
              $ref: '#/components/schemas/addressName'
        - type: object
          properties:
            street:
              $ref: '#/components/schemas/streetName'
        - type: object
          properties:
            streetNumber:
              $ref: '#/components/schemas/streetNumber'
        - type: object
          properties:
            floor:
              $ref: '#/components/schemas/floor'
        - type: object
          properties:
            postCode:
              $ref: '#/components/schemas/postCode'
        - type: object
          properties:
            city:
              $ref: '#/components/schemas/cityName'
        - type: object
          properties:
            stateRegion:
              $ref: '#/components/schemas/stateRegion'
        - type: object
          properties:
            country:
              $ref: '#/components/schemas/country'
    addressName:
      maxLength: 100
      type: string
      description: Name of the address
      example: Henrik
    streetName:
      maxLength: 100
      type: string
      description: The name of the street of the party’s address.
      example: Kronprincessegade
    streetNumber:
      maxLength: 50
      type: string
      description: The number of the street of the party’s address.
      example: "54"
    floor:
      maxLength: 50
      type: string
      description: The floor of the party’s street number.
      example: 5. sal
    postCode:
      maxLength: 10
      type: string
      description: The post code of the party’s address.
      example: "1306"
    cityName:
      maxLength: 65
      type: string
      description: The city name of the party’s address.
      example: København
    stateRegion:
      maxLength: 65
      type: string
      description: The state/region of the party’s address.
      example: N/A
    country:
      maxLength: 75
      type: string
      description: The country of the party’s address.
      example: Denmark
    vessel:
      required:
      - vesselIMONumber
      type: object
      description: "describes a floating, sea going structure (mother vessels and feeder vessels) with either an internal or external mode of propulsion designed for the transport of cargo and/or passengers. Ocean vessels are uniquely identified by an IMO number consisting of 7 digits, or alternatively by their AIS signal with an MMSI number. \n"
      allOf:
        - type: object
          properties:
            vesselIMONumber:
              $ref: '#/components/schemas/vesselIMONumber'
        - type: object
          properties:
            vesselName:
              $ref: '#/components/schemas/vesselName'
        - type: object
          properties:
            vesselFlag:
              $ref: '#/components/schemas/vesselFlag'
        - type: object
          properties:
            vesselCallSignNumber:
              $ref: '#/components/schemas/vesselCallSignNumber'
        - type: object
          properties:
            vesselOperatorCarrierCode:
              $ref: '#/components/schemas/vesselOperatorCarrierCode'
        - type: object
          properties:
            vesselOperatorCarrierCodeListProvider:
              $ref: '#/components/schemas/vesselOperatorCarrierCodeListProvider'
    vesselIMONumber:
      maxLength: 7
      type: string
      description: |
        The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel
      example: "9321483"
    vesselName:
      maxLength: 35
      type: string
      description: |
        The name of the Vessel given by the Vessel Operator and registered with IMO.
      example: King of the Seas
    vesselFlag:
      maxLength: 2
      type: string
      description: |
        The flag of the nation whose laws the vessel is registered under. This is the ISO 3166 two-letter country code
      example: DE
    vesselCallSignNumber:
      maxLength: 10
      type: string
      description: |
        A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.
      example: NCVV
    vesselOperatorCarrierCode:
      maxLength: 10
      type: string
      description: |
        The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists
      nullable: false
      example: MAEU
    vesselOperatorCarrierCodeListProvider:
      type: string
      description: Identifies the code list provider used for the operator and partner carriercodes.
      nullable: false
      example: NMFTA
      enum:
        - SMDG
        - NMFTA
    eventTypeCode:
      maxLength: 4
      type: string
      description: |
        Deprecated - Unique identifier for Event Type Code. This has been replaced by Specialized eventTypeCodes: shipmentEventTypeCode, transportEventTypeCode, equipmentEventTypeCode and opertaionsEventType
      example: ARRI
      deprecated: true
    documentReferences:
      type: array
      description: An optional list of key-value (documentReferenceType-documentReferenceValue) pairs representing links to objects relevant to the event. The <b>documentReferenceType</b>-field is used to describe where the <b>documentReferenceValue</b>-field is pointing to.
      example:
        - documentReferenceType: BKG
          documentReferenceValue: ABC123123123
        - documentReferenceType: TRD
          documentReferenceValue: 85943567-eedb-98d3-f4ed-aed697474ed4
      items:
        $ref: '#/components/schemas/documentReferences_inner'
    references:
      type: object
      properties:
        references:
          type: array
          items:
            $ref: '#/components/schemas/reference'
    reference:
      required:
        - referenceType
        - referenceValue
      type: object
      description: |
        references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
      allOf:
        - type: object
          properties:
            referenceType:
              $ref: '#/components/schemas/referenceType'
        - type: object
          properties:
            referenceValue:
              $ref: '#/components/schemas/referenceValue'
    referenceType:
      type: string
      description: |
        The reference type codes defined by DCSA.
        - FF (Freight Forwarder’s Reference)
        - SI (Shipper’s Reference)
        - PO (Purchase Order Reference)
        - CR (Customer’s Reference)
        - AAO (Consignee’s Reference)
        - EQ (Equipment Reference)
      example: FF
      enum:
        - FF
        - SI
        - PO
        - CR
        - AAO
        - EQ
    referenceValue:
      maxLength: 100
      type: string
      description: The actual value of the reference.
    equipmentEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseEvent'
        - $ref: '#/components/schemas/baseEquipmentEvent'
    baseEquipmentEvent:
      required:
        - emptyIndicatorCode
        - equipmentEventTypeCode
      type: object
      description: |
        The equipment event entity is a specialization of the event entity to support specification of data that only applies to an equipment event.
      allOf:
        - type: object
          properties:
            eventType:
              type: string
              example: EQUIPMENT
              enum:
                - EQUIPMENT
        - type: object
          properties:
            eventClassifierCode:
              type: string
              description: |
                Code for the event classifier can be
                - PLN (Planned)
                - ACT (Actual)
                - EST (Estimated)
              example: EST
              enum:
                - PLN
                - ACT
                - EST
        - type: object
          properties:
            equipmentEventTypeCode:
              $ref: '#/components/schemas/equipmentEventTypeCode'
        - type: object
          properties:
            equipmentReference:
              $ref: '#/components/schemas/equipmentReference'
        - type: object
          properties:
            ISOEquipmentCode:
              $ref: '#/components/schemas/ISOEquipmentCode'
        - type: object
          properties:
            emptyIndicatorCode:
              $ref: '#/components/schemas/emptyIndicatorCode'
        - type: object
          properties:
            eventLocation:
              $ref: '#/components/schemas/location'
        - type: object
          properties:
            transportCallID:
              allOf:
                - $ref: '#/components/schemas/transportCallID'
                - deprecated: true
                - description: The unique identifier for a transport call<br><br>Deprecated - not needed as the TransportCall object is included
        - type: object
          properties:
            transportCall:
              $ref: '#/components/schemas/transportCall'
        - type: object
          properties:
            documentReferences:
              $ref: '#/components/schemas/documentReferences'
        - $ref: '#/components/schemas/references'
        - $ref: '#/components/schemas/seals'
        - type: object
          properties:
            eventTypeCode:
              $ref: '#/components/schemas/eventTypeCode'
        - type: object
          properties:
            eventTypeCode:
              type: string
              description: |
                Unique identifier for Event Type Code, for transport events this is either
                - LOAD (Loaded)
                - DISC (Discharged)
                - GTIN (Gated in)
                - GTOT (Gated out)
                - STUF (Stuffed)
                - STRP (Stripped)

                Deprecated - use equipmentEventTypeCode instead
              deprecated: true
              enum:
                - LOAD
                - DISC
                - GTIN
                - GTOT
                - STUF
                - STRP
    equipmentEventTypeCode:
      type: string
      description: |
        Unique identifier for equipmentEventTypeCode.
        - LOAD (Loaded)
        - DISC (Discharged)
        - GTIN (Gated in)
        - GTOT (Gated out)
        - STUF (Stuffed)
        - STRP (Stripped)
        - PICK (Pick-up)
        - DROP (Drop-off)
        - INSP (Inspected)
        - RSEA (Resealed)
        - RMVD (Removed)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv">GitHub</a>
      example: LOAD
      enum:
        - LOAD
        - DISC
        - GTIN
        - GTOT
        - STUF
        - STRP
        - PICK
        - DROP
        - INSP
        - RSEA
        - RMVD
    equipmentReference:
      maxLength: 15
      type: string
      description: |
        The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
        According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG.
      example: APZU4812090
    ISOEquipmentCode:
      maxLength: 4
      type: string
      description: Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.
      example: 22GP
    emptyIndicatorCode:
      type: string
      description: Code to denote whether the equipment is empty or laden.
      example: EMPTY
      enum:
        - EMPTY
        - LADEN
    seals:
      type: object
      properties:
        seals:
          type: array
          items:
            $ref: '#/components/schemas/seal'
    seal:
      required:
        - sealNumber
        - sealType
      type: object
      description: addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This seal is meant to stay on until the shipment equipment reaches its final destination.
      allOf:
        - type: object
          properties:
            sealNumber:
              $ref: '#/components/schemas/sealNumber'
        - type: object
          properties:
            sealSource:
              $ref: '#/components/schemas/sealSource'
        - type: object
          properties:
            sealType:
              $ref: '#/components/schemas/sealType'
    sealNumber:
      maxLength: 15
      type: string
      description: Identifies a seal affixed to the container.
    sealSource:
      type: string
      description: |
        The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.
        - CAR (Carrier)
        - SHI (Shipper)
        - PHY (Phytosanitary)
        - VET (Veterinary)
        - CUS (Customs)
      example: CUS
      enum:
        - CAR
        - SHI
        - PHY
        - VET
        - CUS
    sealType:
      type: string
      description: |
        The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.
        - KLP (Keyless padlock)
        - BLT (Bolt)
        - WIR (Wire)
      example: WIR
      enum:
        - KLP
        - BLT
        - WIR
    inline_response_200:
      type: object
      properties:
        refresh_token_expires_in:
          type: string
          example: "0"
        api_product_list:
          type: string
          example: "[\"CARGOTRACKING_STAGE\"]"
        api_product_list_json:
          type: string
          example: "[\"CARGOTRACKING_STAGE\"]"
        organization_name:
          type: string
          example: one
        developer.email:
          type: string
          example: ocean_network_express@one-line.com
        token_type:
          type: string
          example: BearerToken
        issued_at:
          type: string
          example: "1593665959269"
        client_id:
          type: string
          example: QwZtVnL8EoH7jUdXkJrP5sWbC3yGaM2iF4
        access_token:
          type: string
          example: G7dB2qKX1Lp4UoVfNwZ9mC6jT8rY3Qe
        application_name:
          type: string
          example: a6b7c8d9-e1f2-4g3h-4567-89i0jklmno1p
        scope:
          type: string
          example: ""
        expires_in:
          type: string
          example: "3599"
        refresh_count:
          type: string
          example: "0"
        status:
          type: string
          example: approved
    inline_response_401:
      type: object
      properties:
        ErrorCode:
          type: string
          example: invalid_request
        Error:
          type: string
          example: API Key is Invalid
    documentReferences_inner:
      type: object
      properties:
        documentReferenceType:
          type: string
          description: Describes where the documentReferenceValue is pointing to
          example: BKG
          enum:
            - BKG (Booking)
            - TRD (Transport Document)
        documentReferenceValue:
          type: string
          description: The value of the identifier the documentReferenceType is describing
          example: 123e4567-e89b-12d3-a456-426614174000
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
