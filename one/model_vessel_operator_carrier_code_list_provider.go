/*
ONE Specification for DCSA Track & Trace API v2.2

  # DCSA Track and Trace v2.2    **Overview:**    The **DCSA Track and Trace v2.2 API** provides a standardized and reliable mechanism for tracking container movements throughout the global shipping network. It is designed to align with the Digital Container Shipping Association (DCSA) standards, promoting **interoperability** between carriers, shippers, and third-party logistics providers.    This API allows stakeholders to monitor the **end-to-end journey** of containers, offering insights into key milestones such as:  - **Vessel arrivals**  - **Departures**  - **Equipment loading**  - **Transport events**    By delivering **uniform tracking data** across various carriers and ports, this API reduces manual processes and improves operational efficiency for managing large-scale shipping operations.    ---    ## Key Features:    ### 1. **Event Standardization**    All events related to container transport are defined according to DCSA standards, ensuring consistent terminology and reporting across the entire logistics chain.    ### 2. **On-Demand Data Retrieval**    Customers can pull **up-to-date information** about container locations, equipment status, and shipment events when needed, enabling timely and informed decision-making.    ### 3. **Seamless Integration**    Designed to integrate easily with existing systems, the API offers flexibility for users who manage large-scale shipments or have evolving logistics requirements.    ### 4. **Scalability**    Whether tracking a few containers or managing thousands, the API is optimized to handle **large datasets efficiently**, ensuring timely access to critical shipping information.    ---    ### Conclusion:    The **DCSA Track and Trace v2.2 API** empowers companies to enhance their visibility into global logistics operations, improve communication between parties, and drive better service outcomes through transparency and **real-time information sharing**.

API version: 2.2
Contact: integration.support@one-line.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package one

import (
	"encoding/json"
	"fmt"
)

// VesselOperatorCarrierCodeListProvider Identifies the code list provider used for the operator and partner carriercodes.
type VesselOperatorCarrierCodeListProvider string

// List of vesselOperatorCarrierCodeListProvider
const (
	SMDG  VesselOperatorCarrierCodeListProvider = "SMDG"
	NMFTA VesselOperatorCarrierCodeListProvider = "NMFTA"
)

// All allowed values of VesselOperatorCarrierCodeListProvider enum
var AllowedVesselOperatorCarrierCodeListProviderEnumValues = []VesselOperatorCarrierCodeListProvider{
	"SMDG",
	"NMFTA",
}

func (v *VesselOperatorCarrierCodeListProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VesselOperatorCarrierCodeListProvider(value)
	for _, existing := range AllowedVesselOperatorCarrierCodeListProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VesselOperatorCarrierCodeListProvider", value)
}

// NewVesselOperatorCarrierCodeListProviderFromValue returns a pointer to a valid VesselOperatorCarrierCodeListProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVesselOperatorCarrierCodeListProviderFromValue(v string) (*VesselOperatorCarrierCodeListProvider, error) {
	ev := VesselOperatorCarrierCodeListProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VesselOperatorCarrierCodeListProvider: valid values are %v", v, AllowedVesselOperatorCarrierCodeListProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VesselOperatorCarrierCodeListProvider) IsValid() bool {
	for _, existing := range AllowedVesselOperatorCarrierCodeListProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vesselOperatorCarrierCodeListProvider value
func (v VesselOperatorCarrierCodeListProvider) Ptr() *VesselOperatorCarrierCodeListProvider {
	return &v
}

type NullableVesselOperatorCarrierCodeListProvider struct {
	value *VesselOperatorCarrierCodeListProvider
	isSet bool
}

func (v NullableVesselOperatorCarrierCodeListProvider) Get() *VesselOperatorCarrierCodeListProvider {
	return v.value
}

func (v *NullableVesselOperatorCarrierCodeListProvider) Set(val *VesselOperatorCarrierCodeListProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableVesselOperatorCarrierCodeListProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableVesselOperatorCarrierCodeListProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVesselOperatorCarrierCodeListProvider(val *VesselOperatorCarrierCodeListProvider) *NullableVesselOperatorCarrierCodeListProvider {
	return &NullableVesselOperatorCarrierCodeListProvider{value: val, isSet: true}
}

func (v NullableVesselOperatorCarrierCodeListProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVesselOperatorCarrierCodeListProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
