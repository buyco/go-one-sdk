/*
ONE CARGO TRACKING API

Cargo tacking details is provided based on DCSA standards. (1.2)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package one

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

type EventsApi interface {

	/*
	V1CargotrackingEventsGet Find events by type, Booking Reference, Bill of Lading or Equipment Reference.

	Returns all events filtered by the parameters.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiV1CargotrackingEventsGetRequest
	*/
	V1CargotrackingEventsGet(ctx _context.Context) ApiV1CargotrackingEventsGetRequest

	// V1CargotrackingEventsGetExecute executes the request
	//  @return SampleEvent
	V1CargotrackingEventsGetExecute(r ApiV1CargotrackingEventsGetRequest) (SampleEvent, *_nethttp.Response, error)
}

// EventsApiService EventsApi service
type EventsApiService service

type ApiV1CargotrackingEventsGetRequest struct {
	ctx _context.Context
	ApiService EventsApi
	apikey *string
	authorization *string
	eventType *[]string
	bookingReference *string
	billOfLadingNumber *string
	equipmentReference *string
}

// valid apikey
func (r ApiV1CargotrackingEventsGetRequest) Apikey(apikey string) ApiV1CargotrackingEventsGetRequest {
	r.apikey = &apikey
	return r
}
// valid access_token
func (r ApiV1CargotrackingEventsGetRequest) Authorization(authorization string) ApiV1CargotrackingEventsGetRequest {
	r.authorization = &authorization
	return r
}
// The type of event(s) to filter by.
func (r ApiV1CargotrackingEventsGetRequest) EventType(eventType []string) ApiV1CargotrackingEventsGetRequest {
	r.eventType = &eventType
	return r
}
// The identifier for a shipment, which is issued by and unique within each of the carriers.
func (r ApiV1CargotrackingEventsGetRequest) BookingReference(bookingReference string) ApiV1CargotrackingEventsGetRequest {
	r.bookingReference = &bookingReference
	return r
}
// Bill of lading number is an identifier that links to a shipment. Bill of Lading is the legal document issued to the customer, which confirms the carrier&#39;s receipt of the cargo from the customer acknowledging goods being shipped and specifying the terms of delivery.
func (r ApiV1CargotrackingEventsGetRequest) BillOfLadingNumber(billOfLadingNumber string) ApiV1CargotrackingEventsGetRequest {
	r.billOfLadingNumber = &billOfLadingNumber
	return r
}
// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
func (r ApiV1CargotrackingEventsGetRequest) EquipmentReference(equipmentReference string) ApiV1CargotrackingEventsGetRequest {
	r.equipmentReference = &equipmentReference
	return r
}

func (r ApiV1CargotrackingEventsGetRequest) Execute() (SampleEvent, *_nethttp.Response, error) {
	return r.ApiService.V1CargotrackingEventsGetExecute(r)
}

/*
V1CargotrackingEventsGet Find events by type, Booking Reference, Bill of Lading or Equipment Reference.

Returns all events filtered by the parameters.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1CargotrackingEventsGetRequest
*/
func (a *EventsApiService) V1CargotrackingEventsGet(ctx _context.Context) ApiV1CargotrackingEventsGetRequest {
	return ApiV1CargotrackingEventsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SampleEvent
func (a *EventsApiService) V1CargotrackingEventsGetExecute(r ApiV1CargotrackingEventsGetRequest) (SampleEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SampleEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.V1CargotrackingEventsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cargotracking/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	if r.eventType != nil {
		t := *r.eventType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("eventType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("eventType", parameterToString(t, "multi"))
		}
	}
	if r.bookingReference != nil {
		localVarQueryParams.Add("bookingReference", parameterToString(*r.bookingReference, ""))
	}
	if r.billOfLadingNumber != nil {
		localVarQueryParams.Add("billOfLadingNumber", parameterToString(*r.billOfLadingNumber, ""))
	}
	if r.equipmentReference != nil {
		localVarQueryParams.Add("equipmentReference", parameterToString(*r.equipmentReference, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["apikey"] = parameterToString(*r.apikey, "")
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineResponse4011
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InlineResponse500
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 504 {
			var v InlineResponse504
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
