/*
ONE Specification for DCSA Track & Trace API v2.2

  # DCSA Track and Trace v2.2    **Overview:**    The **DCSA Track and Trace v2.2 API** provides a standardized and reliable mechanism for tracking container movements throughout the global shipping network. It is designed to align with the Digital Container Shipping Association (DCSA) standards, promoting **interoperability** between carriers, shippers, and third-party logistics providers.    This API allows stakeholders to monitor the **end-to-end journey** of containers, offering insights into key milestones such as:  - **Vessel arrivals**  - **Departures**  - **Equipment loading**  - **Transport events**    By delivering **uniform tracking data** across various carriers and ports, this API reduces manual processes and improves operational efficiency for managing large-scale shipping operations.    ---    ## Key Features:    ### 1. **Event Standardization**    All events related to container transport are defined according to DCSA standards, ensuring consistent terminology and reporting across the entire logistics chain.    ### 2. **On-Demand Data Retrieval**    Customers can pull **up-to-date information** about container locations, equipment status, and shipment events when needed, enabling timely and informed decision-making.    ### 3. **Seamless Integration**    Designed to integrate easily with existing systems, the API offers flexibility for users who manage large-scale shipments or have evolving logistics requirements.    ### 4. **Scalability**    Whether tracking a few containers or managing thousands, the API is optimized to handle **large datasets efficiently**, ensuring timely access to critical shipping information.    ---    ### Conclusion:    The **DCSA Track and Trace v2.2 API** empowers companies to enhance their visibility into global logistics operations, improve communication between parties, and drive better service outcomes through transparency and **real-time information sharing**.

API version: 2.2
Contact: integration.support@one-line.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package one

import (
	"encoding/json"
)

// checks if the BaseTransportEventAllOfTransportCallID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseTransportEventAllOfTransportCallID{}

// BaseTransportEventAllOfTransportCallID struct for BaseTransportEventAllOfTransportCallID
type BaseTransportEventAllOfTransportCallID struct {
}

// NewBaseTransportEventAllOfTransportCallID instantiates a new BaseTransportEventAllOfTransportCallID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTransportEventAllOfTransportCallID() *BaseTransportEventAllOfTransportCallID {
	this := BaseTransportEventAllOfTransportCallID{}
	return &this
}

// NewBaseTransportEventAllOfTransportCallIDWithDefaults instantiates a new BaseTransportEventAllOfTransportCallID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTransportEventAllOfTransportCallIDWithDefaults() *BaseTransportEventAllOfTransportCallID {
	this := BaseTransportEventAllOfTransportCallID{}
	return &this
}

func (o BaseTransportEventAllOfTransportCallID) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTransportEventAllOfTransportCallID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableBaseTransportEventAllOfTransportCallID struct {
	value *BaseTransportEventAllOfTransportCallID
	isSet bool
}

func (v NullableBaseTransportEventAllOfTransportCallID) Get() *BaseTransportEventAllOfTransportCallID {
	return v.value
}

func (v *NullableBaseTransportEventAllOfTransportCallID) Set(val *BaseTransportEventAllOfTransportCallID) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTransportEventAllOfTransportCallID) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTransportEventAllOfTransportCallID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTransportEventAllOfTransportCallID(val *BaseTransportEventAllOfTransportCallID) *NullableBaseTransportEventAllOfTransportCallID {
	return &NullableBaseTransportEventAllOfTransportCallID{value: val, isSet: true}
}

func (v NullableBaseTransportEventAllOfTransportCallID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTransportEventAllOfTransportCallID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
