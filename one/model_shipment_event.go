/*
ONE CARGO TRACKING API

Cargo tacking details is provided based on DCSA standards. (1.2)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package one

import (
	"encoding/json"
	"time"
)

// ShipmentEvent The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.
type ShipmentEvent struct {
	// The unique identifier for the Equipment Event ID/Transport Event ID/Shipment Event ID.
	EventID string `json:"eventID"`
	EventType string `json:"eventType"`
	// The local date and time, where the event took place, in ISO 8601 format.
	EventDateTime time.Time `json:"eventDateTime"`
	// Code for the event classifier, either PLN, ACT or EST.
	EventClassifierCode string `json:"eventClassifierCode"`
	// Unique identifier for Event Type Code.
	EventTypeCode string `json:"eventTypeCode"`
	// The code to identify the type of information that is related to the shipment.
	ShipmentInformationTypeCode string `json:"shipmentInformationTypeCode"`
}

// NewShipmentEvent instantiates a new ShipmentEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShipmentEvent(eventID string, eventType string, eventDateTime time.Time, eventClassifierCode string, eventTypeCode string, shipmentInformationTypeCode string) *ShipmentEvent {
	this := ShipmentEvent{}
	this.EventID = eventID
	this.EventType = eventType
	this.EventDateTime = eventDateTime
	this.EventClassifierCode = eventClassifierCode
	this.EventTypeCode = eventTypeCode
	this.ShipmentInformationTypeCode = shipmentInformationTypeCode
	return &this
}

// NewShipmentEventWithDefaults instantiates a new ShipmentEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShipmentEventWithDefaults() *ShipmentEvent {
	this := ShipmentEvent{}
	return &this
}

// GetEventID returns the EventID field value
func (o *ShipmentEvent) GetEventID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventID
}

// GetEventIDOk returns a tuple with the EventID field value
// and a boolean to check if the value has been set.
func (o *ShipmentEvent) GetEventIDOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventID, true
}

// SetEventID sets field value
func (o *ShipmentEvent) SetEventID(v string) {
	o.EventID = v
}

// GetEventType returns the EventType field value
func (o *ShipmentEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *ShipmentEvent) GetEventTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *ShipmentEvent) SetEventType(v string) {
	o.EventType = v
}

// GetEventDateTime returns the EventDateTime field value
func (o *ShipmentEvent) GetEventDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EventDateTime
}

// GetEventDateTimeOk returns a tuple with the EventDateTime field value
// and a boolean to check if the value has been set.
func (o *ShipmentEvent) GetEventDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventDateTime, true
}

// SetEventDateTime sets field value
func (o *ShipmentEvent) SetEventDateTime(v time.Time) {
	o.EventDateTime = v
}

// GetEventClassifierCode returns the EventClassifierCode field value
func (o *ShipmentEvent) GetEventClassifierCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventClassifierCode
}

// GetEventClassifierCodeOk returns a tuple with the EventClassifierCode field value
// and a boolean to check if the value has been set.
func (o *ShipmentEvent) GetEventClassifierCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventClassifierCode, true
}

// SetEventClassifierCode sets field value
func (o *ShipmentEvent) SetEventClassifierCode(v string) {
	o.EventClassifierCode = v
}

// GetEventTypeCode returns the EventTypeCode field value
func (o *ShipmentEvent) GetEventTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value
// and a boolean to check if the value has been set.
func (o *ShipmentEvent) GetEventTypeCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventTypeCode, true
}

// SetEventTypeCode sets field value
func (o *ShipmentEvent) SetEventTypeCode(v string) {
	o.EventTypeCode = v
}

// GetShipmentInformationTypeCode returns the ShipmentInformationTypeCode field value
func (o *ShipmentEvent) GetShipmentInformationTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShipmentInformationTypeCode
}

// GetShipmentInformationTypeCodeOk returns a tuple with the ShipmentInformationTypeCode field value
// and a boolean to check if the value has been set.
func (o *ShipmentEvent) GetShipmentInformationTypeCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ShipmentInformationTypeCode, true
}

// SetShipmentInformationTypeCode sets field value
func (o *ShipmentEvent) SetShipmentInformationTypeCode(v string) {
	o.ShipmentInformationTypeCode = v
}

func (o ShipmentEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventID"] = o.EventID
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["eventDateTime"] = o.EventDateTime
	}
	if true {
		toSerialize["eventClassifierCode"] = o.EventClassifierCode
	}
	if true {
		toSerialize["eventTypeCode"] = o.EventTypeCode
	}
	if true {
		toSerialize["shipmentInformationTypeCode"] = o.ShipmentInformationTypeCode
	}
	return json.Marshal(toSerialize)
}

type NullableShipmentEvent struct {
	value *ShipmentEvent
	isSet bool
}

func (v NullableShipmentEvent) Get() *ShipmentEvent {
	return v.value
}

func (v *NullableShipmentEvent) Set(val *ShipmentEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentEvent(val *ShipmentEvent) *NullableShipmentEvent {
	return &NullableShipmentEvent{value: val, isSet: true}
}

func (v NullableShipmentEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


