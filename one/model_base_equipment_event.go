/*
ONE Specification for DCSA Track & Trace API v2.2

  # DCSA Track and Trace v2.2    **Overview:**    The **DCSA Track and Trace v2.2 API** provides a standardized and reliable mechanism for tracking container movements throughout the global shipping network. It is designed to align with the Digital Container Shipping Association (DCSA) standards, promoting **interoperability** between carriers, shippers, and third-party logistics providers.    This API allows stakeholders to monitor the **end-to-end journey** of containers, offering insights into key milestones such as:  - **Vessel arrivals**  - **Departures**  - **Equipment loading**  - **Transport events**    By delivering **uniform tracking data** across various carriers and ports, this API reduces manual processes and improves operational efficiency for managing large-scale shipping operations.    ---    ## Key Features:    ### 1. **Event Standardization**    All events related to container transport are defined according to DCSA standards, ensuring consistent terminology and reporting across the entire logistics chain.    ### 2. **On-Demand Data Retrieval**    Customers can pull **up-to-date information** about container locations, equipment status, and shipment events when needed, enabling timely and informed decision-making.    ### 3. **Seamless Integration**    Designed to integrate easily with existing systems, the API offers flexibility for users who manage large-scale shipments or have evolving logistics requirements.    ### 4. **Scalability**    Whether tracking a few containers or managing thousands, the API is optimized to handle **large datasets efficiently**, ensuring timely access to critical shipping information.    ---    ### Conclusion:    The **DCSA Track and Trace v2.2 API** empowers companies to enhance their visibility into global logistics operations, improve communication between parties, and drive better service outcomes through transparency and **real-time information sharing**.

API version: 2.2
Contact: integration.support@one-line.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package one

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BaseEquipmentEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseEquipmentEvent{}

// BaseEquipmentEvent The equipment event entity is a specialization of the event entity to support specification of data that only applies to an equipment event.
type BaseEquipmentEvent struct {
	References []Reference `json:"references,omitempty"`
	Seals      []Seal      `json:"seals,omitempty"`
	EventType  *string     `json:"eventType,omitempty"`
	// Code for the event classifier can be - PLN (Planned) - ACT (Actual) - EST (Estimated)
	EventClassifierCode    *string                `json:"eventClassifierCode,omitempty"`
	EquipmentEventTypeCode EquipmentEventTypeCode `json:"equipmentEventTypeCode"`
	// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG.
	EquipmentReference *string `json:"equipmentReference,omitempty"`
	// Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.
	ISOEquipmentCode   *string                                 `json:"ISOEquipmentCode,omitempty"`
	EmptyIndicatorCode EmptyIndicatorCode                      `json:"emptyIndicatorCode"`
	EventLocation      *Location                               `json:"eventLocation,omitempty"`
	TransportCallID    *BaseEquipmentEventAllOfTransportCallID `json:"transportCallID,omitempty"`
	TransportCall      *TransportCall                          `json:"transportCall,omitempty"`
	// An optional list of key-value (documentReferenceType-documentReferenceValue) pairs representing links to objects relevant to the event. The <b>documentReferenceType</b>-field is used to describe where the <b>documentReferenceValue</b>-field is pointing to.
	DocumentReferences []DocumentReferencesInner `json:"documentReferences,omitempty"`
	// Unique identifier for Event Type Code, for transport events this is either - LOAD (Loaded) - DISC (Discharged) - GTIN (Gated in) - GTOT (Gated out) - STUF (Stuffed) - STRP (Stripped)  Deprecated - use equipmentEventTypeCode instead
	// Deprecated
	EventTypeCode *string `json:"eventTypeCode,omitempty"`
}

type _BaseEquipmentEvent BaseEquipmentEvent

// NewBaseEquipmentEvent instantiates a new BaseEquipmentEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEquipmentEvent(equipmentEventTypeCode EquipmentEventTypeCode, emptyIndicatorCode EmptyIndicatorCode) *BaseEquipmentEvent {
	this := BaseEquipmentEvent{}
	this.EquipmentEventTypeCode = equipmentEventTypeCode
	this.EmptyIndicatorCode = emptyIndicatorCode
	return &this
}

// NewBaseEquipmentEventWithDefaults instantiates a new BaseEquipmentEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEquipmentEventWithDefaults() *BaseEquipmentEvent {
	this := BaseEquipmentEvent{}
	return &this
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetReferences() []Reference {
	if o == nil || IsNil(o.References) {
		var ret []Reference
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetReferencesOk() ([]Reference, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []Reference and assigns it to the References field.
func (o *BaseEquipmentEvent) SetReferences(v []Reference) {
	o.References = v
}

// GetSeals returns the Seals field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetSeals() []Seal {
	if o == nil || IsNil(o.Seals) {
		var ret []Seal
		return ret
	}
	return o.Seals
}

// GetSealsOk returns a tuple with the Seals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetSealsOk() ([]Seal, bool) {
	if o == nil || IsNil(o.Seals) {
		return nil, false
	}
	return o.Seals, true
}

// HasSeals returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasSeals() bool {
	if o != nil && !IsNil(o.Seals) {
		return true
	}

	return false
}

// SetSeals gets a reference to the given []Seal and assigns it to the Seals field.
func (o *BaseEquipmentEvent) SetSeals(v []Seal) {
	o.Seals = v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *BaseEquipmentEvent) SetEventType(v string) {
	o.EventType = &v
}

// GetEventClassifierCode returns the EventClassifierCode field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetEventClassifierCode() string {
	if o == nil || IsNil(o.EventClassifierCode) {
		var ret string
		return ret
	}
	return *o.EventClassifierCode
}

// GetEventClassifierCodeOk returns a tuple with the EventClassifierCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetEventClassifierCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventClassifierCode) {
		return nil, false
	}
	return o.EventClassifierCode, true
}

// HasEventClassifierCode returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasEventClassifierCode() bool {
	if o != nil && !IsNil(o.EventClassifierCode) {
		return true
	}

	return false
}

// SetEventClassifierCode gets a reference to the given string and assigns it to the EventClassifierCode field.
func (o *BaseEquipmentEvent) SetEventClassifierCode(v string) {
	o.EventClassifierCode = &v
}

// GetEquipmentEventTypeCode returns the EquipmentEventTypeCode field value
func (o *BaseEquipmentEvent) GetEquipmentEventTypeCode() EquipmentEventTypeCode {
	if o == nil {
		var ret EquipmentEventTypeCode
		return ret
	}

	return o.EquipmentEventTypeCode
}

// GetEquipmentEventTypeCodeOk returns a tuple with the EquipmentEventTypeCode field value
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetEquipmentEventTypeCodeOk() (*EquipmentEventTypeCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EquipmentEventTypeCode, true
}

// SetEquipmentEventTypeCode sets field value
func (o *BaseEquipmentEvent) SetEquipmentEventTypeCode(v EquipmentEventTypeCode) {
	o.EquipmentEventTypeCode = v
}

// GetEquipmentReference returns the EquipmentReference field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetEquipmentReference() string {
	if o == nil || IsNil(o.EquipmentReference) {
		var ret string
		return ret
	}
	return *o.EquipmentReference
}

// GetEquipmentReferenceOk returns a tuple with the EquipmentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetEquipmentReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.EquipmentReference) {
		return nil, false
	}
	return o.EquipmentReference, true
}

// HasEquipmentReference returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasEquipmentReference() bool {
	if o != nil && !IsNil(o.EquipmentReference) {
		return true
	}

	return false
}

// SetEquipmentReference gets a reference to the given string and assigns it to the EquipmentReference field.
func (o *BaseEquipmentEvent) SetEquipmentReference(v string) {
	o.EquipmentReference = &v
}

// GetISOEquipmentCode returns the ISOEquipmentCode field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetISOEquipmentCode() string {
	if o == nil || IsNil(o.ISOEquipmentCode) {
		var ret string
		return ret
	}
	return *o.ISOEquipmentCode
}

// GetISOEquipmentCodeOk returns a tuple with the ISOEquipmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetISOEquipmentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ISOEquipmentCode) {
		return nil, false
	}
	return o.ISOEquipmentCode, true
}

// HasISOEquipmentCode returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasISOEquipmentCode() bool {
	if o != nil && !IsNil(o.ISOEquipmentCode) {
		return true
	}

	return false
}

// SetISOEquipmentCode gets a reference to the given string and assigns it to the ISOEquipmentCode field.
func (o *BaseEquipmentEvent) SetISOEquipmentCode(v string) {
	o.ISOEquipmentCode = &v
}

// GetEmptyIndicatorCode returns the EmptyIndicatorCode field value
func (o *BaseEquipmentEvent) GetEmptyIndicatorCode() EmptyIndicatorCode {
	if o == nil {
		var ret EmptyIndicatorCode
		return ret
	}

	return o.EmptyIndicatorCode
}

// GetEmptyIndicatorCodeOk returns a tuple with the EmptyIndicatorCode field value
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetEmptyIndicatorCodeOk() (*EmptyIndicatorCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmptyIndicatorCode, true
}

// SetEmptyIndicatorCode sets field value
func (o *BaseEquipmentEvent) SetEmptyIndicatorCode(v EmptyIndicatorCode) {
	o.EmptyIndicatorCode = v
}

// GetEventLocation returns the EventLocation field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetEventLocation() Location {
	if o == nil || IsNil(o.EventLocation) {
		var ret Location
		return ret
	}
	return *o.EventLocation
}

// GetEventLocationOk returns a tuple with the EventLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetEventLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.EventLocation) {
		return nil, false
	}
	return o.EventLocation, true
}

// HasEventLocation returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasEventLocation() bool {
	if o != nil && !IsNil(o.EventLocation) {
		return true
	}

	return false
}

// SetEventLocation gets a reference to the given Location and assigns it to the EventLocation field.
func (o *BaseEquipmentEvent) SetEventLocation(v Location) {
	o.EventLocation = &v
}

// GetTransportCallID returns the TransportCallID field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetTransportCallID() BaseEquipmentEventAllOfTransportCallID {
	if o == nil || IsNil(o.TransportCallID) {
		var ret BaseEquipmentEventAllOfTransportCallID
		return ret
	}
	return *o.TransportCallID
}

// GetTransportCallIDOk returns a tuple with the TransportCallID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetTransportCallIDOk() (*BaseEquipmentEventAllOfTransportCallID, bool) {
	if o == nil || IsNil(o.TransportCallID) {
		return nil, false
	}
	return o.TransportCallID, true
}

// HasTransportCallID returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasTransportCallID() bool {
	if o != nil && !IsNil(o.TransportCallID) {
		return true
	}

	return false
}

// SetTransportCallID gets a reference to the given BaseEquipmentEventAllOfTransportCallID and assigns it to the TransportCallID field.
func (o *BaseEquipmentEvent) SetTransportCallID(v BaseEquipmentEventAllOfTransportCallID) {
	o.TransportCallID = &v
}

// GetTransportCall returns the TransportCall field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetTransportCall() TransportCall {
	if o == nil || IsNil(o.TransportCall) {
		var ret TransportCall
		return ret
	}
	return *o.TransportCall
}

// GetTransportCallOk returns a tuple with the TransportCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetTransportCallOk() (*TransportCall, bool) {
	if o == nil || IsNil(o.TransportCall) {
		return nil, false
	}
	return o.TransportCall, true
}

// HasTransportCall returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasTransportCall() bool {
	if o != nil && !IsNil(o.TransportCall) {
		return true
	}

	return false
}

// SetTransportCall gets a reference to the given TransportCall and assigns it to the TransportCall field.
func (o *BaseEquipmentEvent) SetTransportCall(v TransportCall) {
	o.TransportCall = &v
}

// GetDocumentReferences returns the DocumentReferences field value if set, zero value otherwise.
func (o *BaseEquipmentEvent) GetDocumentReferences() []DocumentReferencesInner {
	if o == nil || IsNil(o.DocumentReferences) {
		var ret []DocumentReferencesInner
		return ret
	}
	return o.DocumentReferences
}

// GetDocumentReferencesOk returns a tuple with the DocumentReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEvent) GetDocumentReferencesOk() ([]DocumentReferencesInner, bool) {
	if o == nil || IsNil(o.DocumentReferences) {
		return nil, false
	}
	return o.DocumentReferences, true
}

// HasDocumentReferences returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasDocumentReferences() bool {
	if o != nil && !IsNil(o.DocumentReferences) {
		return true
	}

	return false
}

// SetDocumentReferences gets a reference to the given []DocumentReferencesInner and assigns it to the DocumentReferences field.
func (o *BaseEquipmentEvent) SetDocumentReferences(v []DocumentReferencesInner) {
	o.DocumentReferences = v
}

// GetEventTypeCode returns the EventTypeCode field value if set, zero value otherwise.
// Deprecated
func (o *BaseEquipmentEvent) GetEventTypeCode() string {
	if o == nil || IsNil(o.EventTypeCode) {
		var ret string
		return ret
	}
	return *o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BaseEquipmentEvent) GetEventTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTypeCode) {
		return nil, false
	}
	return o.EventTypeCode, true
}

// HasEventTypeCode returns a boolean if a field has been set.
func (o *BaseEquipmentEvent) HasEventTypeCode() bool {
	if o != nil && !IsNil(o.EventTypeCode) {
		return true
	}

	return false
}

// SetEventTypeCode gets a reference to the given string and assigns it to the EventTypeCode field.
// Deprecated
func (o *BaseEquipmentEvent) SetEventTypeCode(v string) {
	o.EventTypeCode = &v
}

func (o BaseEquipmentEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseEquipmentEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Seals) {
		toSerialize["seals"] = o.Seals
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.EventClassifierCode) {
		toSerialize["eventClassifierCode"] = o.EventClassifierCode
	}
	toSerialize["equipmentEventTypeCode"] = o.EquipmentEventTypeCode
	if !IsNil(o.EquipmentReference) {
		toSerialize["equipmentReference"] = o.EquipmentReference
	}
	if !IsNil(o.ISOEquipmentCode) {
		toSerialize["ISOEquipmentCode"] = o.ISOEquipmentCode
	}
	toSerialize["emptyIndicatorCode"] = o.EmptyIndicatorCode
	if !IsNil(o.EventLocation) {
		toSerialize["eventLocation"] = o.EventLocation
	}
	if !IsNil(o.TransportCallID) {
		toSerialize["transportCallID"] = o.TransportCallID
	}
	if !IsNil(o.TransportCall) {
		toSerialize["transportCall"] = o.TransportCall
	}
	if !IsNil(o.DocumentReferences) {
		toSerialize["documentReferences"] = o.DocumentReferences
	}
	if !IsNil(o.EventTypeCode) {
		toSerialize["eventTypeCode"] = o.EventTypeCode
	}
	return toSerialize, nil
}

func (o *BaseEquipmentEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"equipmentEventTypeCode",
		"emptyIndicatorCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseEquipmentEvent := _BaseEquipmentEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseEquipmentEvent)

	if err != nil {
		return err
	}

	*o = BaseEquipmentEvent(varBaseEquipmentEvent)

	return err
}

type NullableBaseEquipmentEvent struct {
	value *BaseEquipmentEvent
	isSet bool
}

func (v NullableBaseEquipmentEvent) Get() *BaseEquipmentEvent {
	return v.value
}

func (v *NullableBaseEquipmentEvent) Set(val *BaseEquipmentEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEquipmentEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEquipmentEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEquipmentEvent(val *BaseEquipmentEvent) *NullableBaseEquipmentEvent {
	return &NullableBaseEquipmentEvent{value: val, isSet: true}
}

func (v NullableBaseEquipmentEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEquipmentEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
