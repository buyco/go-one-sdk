/*
ONE CARGO TRACKING API

Cargo tacking details is provided based on DCSA standards. (1.2)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package one

import (
	"encoding/json"
)

// EquipmentEventAllOf struct for EquipmentEventAllOf
type EquipmentEventAllOf struct {
	EventType *string `json:"eventType,omitempty"`
	// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. If a container is not yet assigned to a shipment, the interface cannot return any information when an equipment reference is given as input. If a container is assigned to an (active) shipment, the interface returns information on the active shipment.
	EquipmentReference *string `json:"equipmentReference,omitempty"`
	// The code to identify the specific type of facility.
	FacilityTypeCode string `json:"facilityTypeCode"`
	// The UN Location Code identifies a location in the sense of a city/a town/a village, being the smaller administrative area existing as defined by the competent national authority in each country.
	UNLocationCode string `json:"UNLocationCode"`
	// The code used for identifying the specific facility.
	FacilityCode string `json:"facilityCode"`
	// An alternative way to capture the facility when no standardized DCSA facility code can be found.
	OtherFacility *string `json:"otherFacility,omitempty"`
	// Code to denote whether the equipment is empty or laden.
	EmptyIndicatorCode string `json:"emptyIndicatorCode"`
}

// NewEquipmentEventAllOf instantiates a new EquipmentEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipmentEventAllOf(facilityTypeCode string, uNLocationCode string, facilityCode string, emptyIndicatorCode string) *EquipmentEventAllOf {
	this := EquipmentEventAllOf{}
	this.FacilityTypeCode = facilityTypeCode
	this.UNLocationCode = uNLocationCode
	this.FacilityCode = facilityCode
	this.EmptyIndicatorCode = emptyIndicatorCode
	return &this
}

// NewEquipmentEventAllOfWithDefaults instantiates a new EquipmentEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipmentEventAllOfWithDefaults() *EquipmentEventAllOf {
	this := EquipmentEventAllOf{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *EquipmentEventAllOf) SetEventType(v string) {
	o.EventType = &v
}

// GetEquipmentReference returns the EquipmentReference field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetEquipmentReference() string {
	if o == nil || o.EquipmentReference == nil {
		var ret string
		return ret
	}
	return *o.EquipmentReference
}

// GetEquipmentReferenceOk returns a tuple with the EquipmentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetEquipmentReferenceOk() (*string, bool) {
	if o == nil || o.EquipmentReference == nil {
		return nil, false
	}
	return o.EquipmentReference, true
}

// HasEquipmentReference returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasEquipmentReference() bool {
	if o != nil && o.EquipmentReference != nil {
		return true
	}

	return false
}

// SetEquipmentReference gets a reference to the given string and assigns it to the EquipmentReference field.
func (o *EquipmentEventAllOf) SetEquipmentReference(v string) {
	o.EquipmentReference = &v
}

// GetFacilityTypeCode returns the FacilityTypeCode field value
func (o *EquipmentEventAllOf) GetFacilityTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FacilityTypeCode
}

// GetFacilityTypeCodeOk returns a tuple with the FacilityTypeCode field value
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetFacilityTypeCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FacilityTypeCode, true
}

// SetFacilityTypeCode sets field value
func (o *EquipmentEventAllOf) SetFacilityTypeCode(v string) {
	o.FacilityTypeCode = v
}

// GetUNLocationCode returns the UNLocationCode field value
func (o *EquipmentEventAllOf) GetUNLocationCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UNLocationCode
}

// GetUNLocationCodeOk returns a tuple with the UNLocationCode field value
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetUNLocationCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UNLocationCode, true
}

// SetUNLocationCode sets field value
func (o *EquipmentEventAllOf) SetUNLocationCode(v string) {
	o.UNLocationCode = v
}

// GetFacilityCode returns the FacilityCode field value
func (o *EquipmentEventAllOf) GetFacilityCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FacilityCode
}

// GetFacilityCodeOk returns a tuple with the FacilityCode field value
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetFacilityCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FacilityCode, true
}

// SetFacilityCode sets field value
func (o *EquipmentEventAllOf) SetFacilityCode(v string) {
	o.FacilityCode = v
}

// GetOtherFacility returns the OtherFacility field value if set, zero value otherwise.
func (o *EquipmentEventAllOf) GetOtherFacility() string {
	if o == nil || o.OtherFacility == nil {
		var ret string
		return ret
	}
	return *o.OtherFacility
}

// GetOtherFacilityOk returns a tuple with the OtherFacility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetOtherFacilityOk() (*string, bool) {
	if o == nil || o.OtherFacility == nil {
		return nil, false
	}
	return o.OtherFacility, true
}

// HasOtherFacility returns a boolean if a field has been set.
func (o *EquipmentEventAllOf) HasOtherFacility() bool {
	if o != nil && o.OtherFacility != nil {
		return true
	}

	return false
}

// SetOtherFacility gets a reference to the given string and assigns it to the OtherFacility field.
func (o *EquipmentEventAllOf) SetOtherFacility(v string) {
	o.OtherFacility = &v
}

// GetEmptyIndicatorCode returns the EmptyIndicatorCode field value
func (o *EquipmentEventAllOf) GetEmptyIndicatorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmptyIndicatorCode
}

// GetEmptyIndicatorCodeOk returns a tuple with the EmptyIndicatorCode field value
// and a boolean to check if the value has been set.
func (o *EquipmentEventAllOf) GetEmptyIndicatorCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EmptyIndicatorCode, true
}

// SetEmptyIndicatorCode sets field value
func (o *EquipmentEventAllOf) SetEmptyIndicatorCode(v string) {
	o.EmptyIndicatorCode = v
}

func (o EquipmentEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if o.EquipmentReference != nil {
		toSerialize["equipmentReference"] = o.EquipmentReference
	}
	if true {
		toSerialize["facilityTypeCode"] = o.FacilityTypeCode
	}
	if true {
		toSerialize["UNLocationCode"] = o.UNLocationCode
	}
	if true {
		toSerialize["facilityCode"] = o.FacilityCode
	}
	if o.OtherFacility != nil {
		toSerialize["otherFacility"] = o.OtherFacility
	}
	if true {
		toSerialize["emptyIndicatorCode"] = o.EmptyIndicatorCode
	}
	return json.Marshal(toSerialize)
}

type NullableEquipmentEventAllOf struct {
	value *EquipmentEventAllOf
	isSet bool
}

func (v NullableEquipmentEventAllOf) Get() *EquipmentEventAllOf {
	return v.value
}

func (v *NullableEquipmentEventAllOf) Set(val *EquipmentEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentEventAllOf(val *EquipmentEventAllOf) *NullableEquipmentEventAllOf {
	return &NullableEquipmentEventAllOf{value: val, isSet: true}
}

func (v NullableEquipmentEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


